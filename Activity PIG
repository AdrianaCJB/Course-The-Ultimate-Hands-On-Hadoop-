/ ********************************************************************** /
*				 ________                ________
*				|		|		|		|
*				|_______|		|		|________
*				|				|		|		 |	
*				|				|		|________|	
*
/ ********************************************************************** /

--So the really cool thing about Pig is that it doesn't have to use mapreduce at all.
--Tez uses what's called a directed acyclic graph to actually analyze all the interrelationships between
--the different steps that you're doing and try to figure out the most optimal path for executing things.


Pig Latin Commands:

* 	LOAD	STORE	DUMP
*	FILTER	DISTINTCT	FOREACH/GENERATE	MAPREDUCE	STREAM	SAMPLE
*	JOIN	COGROUP	GROUP	CROSS	CUBE
*	ORDER	RANK	LIMIT	
*	UNION 	SPLIT




---------------------------FIND THE OLDEST MOVIE WITH 5-STAR-----------------------------------------
----------------------------------------------------------------------------------------------------


ratings = LOAD '/user/maria_dev/ml-100k/u.data' AS (userID:int, movieID:int, rating:int);

metadata = LOAD '/user/maria_dev/ml-100k/u.item' USING PigStorage('|')
		AS (movieID:int, movieTitle:chararray, releaseDate:chararray, videoRelease:chararray, imdbLink:chararray);
		
nameLookup = FOREACH metadata GENERATE movieID, movieTitle, ToUnixTime(ToDate(releaseDate,'dd-MMM-yyyy')) AS releaseTime;

ratingsByMovie = GROUP ratings BY movieID;

avgRatings = FOREACH ratingsByMovie GENERATE group AS movieID, AVG(ratings.rating) AS avgRating;

fiveStarMovies = FILTER avgRatings BY avgRating > 4.0;

fiveStarWithData = JOIN fiveStarMovies By movieID, nameLookup BY movieID;

oldestFiveStarMovies = ORDER fiveStarWithData BY nameLookup::releaseTime;

DUMP oldestFiveStarMovies;




---------------------------FIND THE MOST POPULAR BAD MOVIE------------------------------------------
----------------------------------------------------------------------------------------------------



ratings = LOAD '/user/maria_dev/ml-100k/u.data' AS (userID:int, movieID:int, rating:int);

metadata = LOAD '/user/maria_dev/ml-100k/u.item' USING PigStorage('|')
		AS (movieID:int, movieTitle:chararray, releaseDate:chararray, videoRelease:chararray, imdbLink:chararray);
		
nameLookup = FOREACH metadata GENERATE movieID, movieTitle;

groupedRatings = GROUP ratings BY movieID;

avgRatings = FOREACH groupedRatings GENERATE group AS movieID, AVG(ratings.rating) AS avgRating, COUNT(ratings.rating) AS numRatings;

badMovies = FILTER avgRatings BY avgRating < 2.0;

nameBadMovies = JOIN badMovies By movieID, nameLookup BY movieID;

finalResults = FOREACH nameBadMovies GENERATE nameLookup::movieTitle AS movieName, badMovies::avgRating, badMovies::numRatings AS numRatings;

finalResultsSorted = ORDER finalResults BY numRatings DESC;

DUMP finalResultsSorted;











